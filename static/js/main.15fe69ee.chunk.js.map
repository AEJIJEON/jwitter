{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/ProfilePhoto.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","newInfo","uid","user","photoUrl","displayName","collection","add","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","isNew","get","docs","forEach","doc","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","id","delete","attachmentUrl","refFromURL","toggleEditing","update","className","src","alt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","width","height","onLogOutClick","signOut","Home","nweets","setNweets","useEffect","infoArray","onSnapshot","snapshot","map","nweetArray","i","length","j","sort","b","parseInt","key","ProfilePhoto","setPhotoInfo","docId","newPhotoInfo","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","photoInfo","mounted","setMounted","updateProfile","push","Navigation","to","replace","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15fe69ee.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService, dbService } from \"fbase\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n        //userInfos 추가\n        const newInfo = {\n          uid: data.user.uid,\n          photoUrl: \"\",\n          // 처음에는 null로 설정됨\n          displayName: \"not set\",\n        };\n        await dbService.collection(\"userInfos\").add(newInfo);\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error}\n      </form>\n      <span onClick={toggleAccount}>\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\nexport default AuthForm;\n","import React from \"react\";\nimport { authService, dbService, firebaseInstance } from \"fbase\";\nimport AuthForm from \"components/AuthForm\";\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n\n    const data = await authService.signInWithPopup(provider);\n    // provider로 로그인 시 이미 등록된 유저인지 확인해주어야 함 -> userInfos collection 가져와서 체크\n    var newInfo;\n    var isNew = true;\n    const getRef = await dbService.collection(\"userInfos\").get();\n    getRef.docs.forEach((doc) => {\n      // 등록된 user\n      if (doc.data().uid === data.user.uid) {\n        isNew = false;\n      }\n    });\n\n    //새로운 user의 경우 -> userInfos collection에 정보 추가\n    if (isNew) {\n      newInfo = {\n        uid: data.user.uid,\n        photoUrl: \"\",\n        // 처음에는 null로 설정됨\n        displayName: \"not set\",\n      };\n\n      await dbService.collection(\"userInfos\").add(newInfo);\n    }\n  };\n\n  return (\n    <div>\n      <AuthForm />\n      <div>\n        <button onClick={onSocialClick} name=\"google\">\n          Continue with Google\n        </button>\n        <button onClick={onSocialClick} name=\"github\">\n          Continue with Github\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport \"components/nweet.css\";\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n    if (ok) {\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      if (nweetObj.attachmentUrl !== \"\") {\n        await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n      }\n    }\n  };\n  const toggleEditing = () => {\n    setEditing((prev) => !prev);\n    // 글 내용 편집하다가 캔슬한 경우(text 바뀐 상태로)\n    if (newNweet !== nweetObj.text) {\n      setNewNweet(nweetObj.text);\n    }\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    // 사진 edit하는 기능은 x(삭제, 변경 x), text만 update 가능\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\n      text: newNweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNweet(value);\n  };\n\n  return (\n    <div>\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Edit your nweet\"\n              value={newNweet}\n              required\n              onChange={onChange}\n            />\n            <input type=\"submit\" value=\"Update Nweet\" />\n          </form>\n          <button onClick={toggleEditing}>Cancel</button>\n        </>\n      ) : (\n        <div className=\"nweetContainer\">\n          <div className=\"nweet-user-infos\">\n            <h5 className=\"nweet-user-name\">name: {nweetObj.displayName}</h5>\n\n            {nweetObj.photoUrl && (\n              <img\n                src={nweetObj.photoUrl}\n                className=\"nweet-user-photo\"\n                alt=\"\"\n              />\n            )}\n          </div>\n          <div className=\"nweet-infos\">\n            {nweetObj.attachmentUrl && (\n              <img\n                className=\"nweet-photo\"\n                src={nweetObj.attachmentUrl}\n                alt=\"\"\n              />\n            )}\n            <h4 className=\"nweet-text\">content: {nweetObj.text}</h4>\n            {isOwner && (\n              <>\n                <button onClick={onDeleteClick}>Delete Nweet</button>\n                <button onClick={toggleEditing}>Edit Nweet</button>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { storageService, dbService } from \"fbase\";\nconst NweetFactory = ({ userObj }) => {\n  const [nweet, setNweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (nweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const nweetObj = {\n      text: nweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"nweets\").add(nweetObj);\n    setNweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => setAttachment(\"\");\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        className=\"nweetInputText\"\n        value={nweet}\n        onChange={onChange}\n        type=\"text\"\n        placeholder=\"What's on your mind???\"\n        maxLength={120}\n      />\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n      <input type=\"submit\" value=\"Nweet\" />\n      {attachment && (\n        <div>\n          <img src={attachment} width=\"50px\" height=\"50px\" alt=\"\" />\n          <button onClick={onClearAttachment}>Clear</button>\n        </div>\n      )}\n    </form>\n  );\n};\nexport default NweetFactory;\n","import React, { useState, useEffect } from \"react\";\nimport { authService, dbService } from \"fbase\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\nimport \"components/home.css\";\nconst onLogOutClick = async () => {\n  await authService.signOut();\n};\nconst Home = ({ userObj }) => {\n  const [nweets, setNweets] = useState([]);\n\n  useEffect(() => {\n    //userInfos도 가져옴\n    var infoArray;\n    dbService.collection(\"userInfos\").onSnapshot((snapshot) => {\n      infoArray = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n      }));\n    });\n\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n      const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      // nweet와 info uid와 creator id가 같은 경우에 대해서\n      // nweet에 추가 정보 더 더해줌\n      for (var i = 0; i < nweetArray.length; i++) {\n        for (var j = 0; j < infoArray.length; j++) {\n          if (nweetArray[i].creatorId === infoArray[j].uid) {\n            nweetArray[i].displayName = infoArray[j].displayName;\n            nweetArray[i].photoUrl = infoArray[j].photoUrl;\n          }\n        }\n      }\n      // js sort() 이용해서 시간 느린 순으로 정렬(더 효율적인 방법이 있을텐데.. 일단 보류)\n      nweetArray.sort(function (a, b) {\n        return parseInt(b.createdAt) - parseInt(a.createdAt);\n      });\n      setNweets(nweetArray);\n    });\n  }, []);\n  return (\n    <>\n      <div className=\"logoutAndNweetForm\">\n        <button onClick={() => onLogOutClick()}>Log Out</button>\n        <NweetFactory userObj={userObj} />\n      </div>\n      <div className=\"nweetsContainer\">\n        {nweets.map((nweet) => (\n          <Nweet\n            key={nweet.id}\n            nweetObj={nweet}\n            isOwner={nweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\nexport default Home;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst ProfilePhoto = ({ userObj, setPhotoInfo }) => {\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`userProfilePhotos/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n\n    var docId;\n    const userInfosRef = await dbService.collection(\"userInfos\").get();\n    userInfosRef.docs.forEach((doc) => {\n      if (userObj.uid === doc.data().uid) {\n        docId = doc.id;\n      }\n    });\n    // display name, profile photo는 실시간 update 적용시키지 x\n    // reload시에 변경되도록..!\n    await dbService.doc(`userInfos/${docId}`).update({\n      photoUrl: attachmentUrl,\n    });\n    const newPhotoInfo = {\n      docId: docId,\n      photoUrl: attachmentUrl,\n    };\n    setAttachment(\"\");\n    setPhotoInfo(newPhotoInfo);\n  };\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const clearPhoto = () => setAttachment(\"\");\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n      {attachment && (\n        <>\n          <img src={attachment} width=\"50px\" height=\"50px\" alt=\"\" />\n          <button onClick={clearPhoto}>Clear</button>\n        </>\n      )}\n      <input type=\"submit\" value=\"Add Photo\" />\n    </form>\n  );\n};\n\nexport default ProfilePhoto;\n","import React, { useEffect, useState } from \"react\";\nimport { authService, dbService, storageService } from \"fbase\";\nimport { useHistory } from \"react-router-dom\";\nimport ProfilePhoto from \"components/ProfilePhoto\";\nimport \"routes/profile.css\";\nconst Profile = ({ refreshUser, userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const [photoInfo, setPhotoInfo] = useState({});\n  const [mounted, setMounted] = useState(false);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n  useEffect(() => {\n    dbService.collection(\"userInfos\").onSnapshot((snapshot) => {\n      snapshot.docs.forEach((doc) => {\n        if (userObj.uid === doc.data().uid) {\n          var newPhotoInfo = {\n            docId: doc.id,\n            photoUrl: doc.data().photoUrl,\n          };\n\n          setPhotoInfo(newPhotoInfo);\n        }\n      });\n    });\n\n    setMounted(true);\n  }, [userObj]);\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n\n  // 이름변경시 트윗들 displayname 싹 변경(트윗 자체를 user별로 폴더를 만드는게 나을 듯..?)\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      var docId;\n      const userInfosRef = await dbService.collection(\"userInfos\").get();\n      userInfosRef.docs.forEach((doc) => {\n        if (userObj.uid === doc.data().uid) {\n          docId = doc.id;\n        }\n      });\n      // display name, profile photo는 실시간 update 적용시키지 x\n      // reload시에 변경되도록..!\n      await dbService.doc(`userInfos/${docId}`).update({\n        displayName: newDisplayName,\n      });\n\n      refreshUser();\n    }\n  };\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this photo?\");\n    if (ok) {\n      // update로 바꾸기\n      await dbService.doc(`userInfos/${photoInfo.docId}`).update({\n        photoUrl: \"\",\n      });\n      await storageService.refFromURL(photoInfo.photoUrl).delete();\n\n      setPhotoInfo({});\n    }\n  };\n\n  return (\n    <>\n      <button onClick={() => onLogOutClick()}>Log Out</button>\n      <form onSubmit={onSubmit}>\n        <input\n          className=\"profileNameText\"\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"Display name\"\n          value={newDisplayName}\n        ></input>\n\n        <input type=\"submit\" value=\"Update Profile\" />\n      </form>\n      <>\n        {mounted && photoInfo.photoUrl ? (\n          <>\n            <div>\n              <img src={photoInfo.photoUrl} alt=\"\" className=\"profile-photo\" />\n            </div>\n            <div>\n              <button onClick={() => onDeleteClick()}>Delete Photo</button>\n            </div>\n          </>\n        ) : (\n          <ProfilePhoto userObj={userObj} setPhotoInfo={setPhotoInfo} />\n        )}\n      </>\n    </>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"components/navigation.css\";\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <div className=\"menuContainer\">\n      <div className=\"homeContainer\">\n        <Link to=\"/\" replace>\n          Home\n        </Link>\n      </div>\n      <div className=\"profileContainer\">\n        <Link to=\"/profile\" replace>\n          {userObj.displayName}의 Profile\n        </Link>\n      </div>\n    </div>\n  </nav>\n);\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <>\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\nexport default AppRouter;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\nfunction App() {\n  \n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...!!\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}